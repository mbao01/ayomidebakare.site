{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "# Linear algebra and data manipulation imports\n",
    "import pandas as pd\n",
    "\n",
    "# Visualization imports\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "sns.set_style('whitegrid')\n",
    "plt.style.use('dark_background')\n",
    "%matplotlib inline"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "##### Import data"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_DIR='../data/'\n",
    "\n",
    "# Import train data and test data\n",
    "train = pd.read_csv(DATA_DIR + 'raw_titanic_train.csv')\n",
    "test = pd.read_csv(DATA_DIR + 'raw_titanic_test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### EDA\n",
    "###### General Outline of EDA\n",
    "1. Summarize representation and objective\n",
    "2. High level data preview (features, targets, train and test sets)\n",
    "3. Visualize any null values and duplicate entries\n",
    "4. Visual EDA\n",
    "\n",
    "Note that *Survived*, *Pclass*, *Sex* and *Embarked* are categorical variables here. So we need dummy variables to represent each category using one-hot encoding and avoiding full correlation between the correlations (a category is omitted to prevent full correlation)\n",
    "\n",
    "\n",
    "###### 1a. Representation\n",
    "\n",
    "*Survived*: perfect, 1 represents survived and 0 represents not-survived\n",
    "\n",
    "*PClass*: 1 represents 'First Class', 2 represents 'Second Class' and 3 represents 'Third Class'\n",
    "\n",
    "*Sex*: Male and female\n",
    "\n",
    "*Embarked*: C represents 'Cherbourg', S represents 'Southampton' and Q represents 'Queenstown'\n",
    "\n",
    "\n",
    "###### 1b. Objective\n",
    "Predict survival (survived or not) of passengers on rms titanic"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 2. High level data preview (features, targets, train and test sets)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "**Train data**"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# Check info of train dataset\n",
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "From the *Non-Null Count* column above, see that the **Age** feature has missing values (177 to be exact), **Embarked**\n",
    "has 2 missing values and **Cabin** has an astounding 687 missing values."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "data": {
      "text/plain": "   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n5            6         0       3   \n6            7         0       1   \n7            8         0       3   \n8            9         1       3   \n9           10         1       2   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n5                                   Moran, Mr. James    male   NaN      0   \n6                            McCarthy, Mr. Timothy J    male  54.0      0   \n7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n5      0            330877   8.4583   NaN        Q  \n6      0             17463  51.8625   E46        S  \n7      1            349909  21.0750   NaN        S  \n8      2            347742  11.1333   NaN        S  \n9      0            237736  30.0708   NaN        C  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>female</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check first 10 rows of train data set\n",
    "train.head(10)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "(891, 12)"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check shape of train dataset\n",
    "train.shape\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "From the table below, the columns with reasonable/complete statistic (non-categorical continuous valued features)\n",
    "are **Age** and **Fare**. We can see from the train data that the average **Age** of people onboard the\n",
    "titanic is 29.699118, meaning there were more young people than old people onboard.\n",
    "The youngest person was 5months and the oldest was 80years of age."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show description of train dataset for numerical columns\n",
    "# (may include some categorical columns as well)\n",
    "train.describe()\n",
    "\n",
    "# Note that 'Survived' and 'Pclass' shown are categorical variables and not numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "**Test data**"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Check info of test dataset\n",
    "test.info()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "For the test dataset, missing values are noticed for some features as shown above in the *Non-Null Count* column above,\n",
    "see that the **Age** feature has 86 missing values, **Cabin** has 327 missing values, and **Fare** has 1 missing value.\n",
    "Notice that in the train dataset **Fare** has no missing value, we would have to handle imputation\n",
    "for **Fare** in test set specially."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n5          897       3                    Svensson, Mr. Johan Cervin    male   \n6          898       3                          Connolly, Miss. Kate  female   \n7          899       2                  Caldwell, Mr. Albert Francis    male   \n8          900       3     Abrahim, Mrs. Joseph (Sophie Halaut Easu)  female   \n9          901       3                       Davies, Mr. John Samuel    male   \n\n    Age  SibSp  Parch     Ticket     Fare Cabin Embarked  \n0  34.5      0      0     330911   7.8292   NaN        Q  \n1  47.0      1      0     363272   7.0000   NaN        S  \n2  62.0      0      0     240276   9.6875   NaN        Q  \n3  27.0      0      0     315154   8.6625   NaN        S  \n4  22.0      1      1    3101298  12.2875   NaN        S  \n5  14.0      0      0       7538   9.2250   NaN        S  \n6  30.0      0      0     330972   7.6292   NaN        Q  \n7  26.0      1      1     248738  29.0000   NaN        S  \n8  18.0      0      0       2657   7.2292   NaN        C  \n9  21.0      2      0  A/4 48871  24.1500   NaN        S  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>897</td>\n      <td>3</td>\n      <td>Svensson, Mr. Johan Cervin</td>\n      <td>male</td>\n      <td>14.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7538</td>\n      <td>9.2250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>898</td>\n      <td>3</td>\n      <td>Connolly, Miss. Kate</td>\n      <td>female</td>\n      <td>30.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330972</td>\n      <td>7.6292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>899</td>\n      <td>2</td>\n      <td>Caldwell, Mr. Albert Francis</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>248738</td>\n      <td>29.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>900</td>\n      <td>3</td>\n      <td>Abrahim, Mrs. Joseph (Sophie Halaut Easu)</td>\n      <td>female</td>\n      <td>18.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2657</td>\n      <td>7.2292</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>901</td>\n      <td>3</td>\n      <td>Davies, Mr. John Samuel</td>\n      <td>male</td>\n      <td>21.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>A/4 48871</td>\n      <td>24.1500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check first 10 rows of test data set\n",
    "test.head(10)\n",
    "\n",
    "# Has same columns as the train data except the label, 'Survived' is out"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "(418, 11)"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the dimensions (row count) of the test data\n",
    "test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "The test dataset is different from the train dataset, as it should be.\n",
    "Here, as shown in the table below. From the **Age** column, the average age of people onboard the\n",
    "titanic is 30.272590. The youngest person was 2months and the oldest was 76years of age."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "       PassengerId      Pclass         Age       SibSp       Parch        Fare\ncount   418.000000  418.000000  332.000000  418.000000  418.000000  417.000000\nmean   1100.500000    2.265550   30.272590    0.447368    0.392344   35.627188\nstd     120.810458    0.841838   14.181209    0.896760    0.981429   55.907576\nmin     892.000000    1.000000    0.170000    0.000000    0.000000    0.000000\n25%     996.250000    1.000000   21.000000    0.000000    0.000000    7.895800\n50%    1100.500000    3.000000   27.000000    0.000000    0.000000   14.454200\n75%    1204.750000    3.000000   39.000000    1.000000    0.000000   31.500000\nmax    1309.000000    3.000000   76.000000    8.000000    9.000000  512.329200",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>332.000000</td>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>417.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1100.500000</td>\n      <td>2.265550</td>\n      <td>30.272590</td>\n      <td>0.447368</td>\n      <td>0.392344</td>\n      <td>35.627188</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>120.810458</td>\n      <td>0.841838</td>\n      <td>14.181209</td>\n      <td>0.896760</td>\n      <td>0.981429</td>\n      <td>55.907576</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>892.000000</td>\n      <td>1.000000</td>\n      <td>0.170000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>996.250000</td>\n      <td>1.000000</td>\n      <td>21.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.895800</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1100.500000</td>\n      <td>3.000000</td>\n      <td>27.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1204.750000</td>\n      <td>3.000000</td>\n      <td>39.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1309.000000</td>\n      <td>3.000000</td>\n      <td>76.000000</td>\n      <td>8.000000</td>\n      <td>9.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the description of the test data, excluding non-numeric columns\n",
    "test.describe()\n",
    "\n",
    "# Note that Pclass' shown is a categorical variable"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 3. Visualize any null values and duplicate entries\n",
    "**Visualize null values in train data**"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:>"
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize null values in train data\n",
    "\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "**Visualize null values in test data**"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:>"
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize null values in test data\n",
    "\n",
    "sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 4. Visual EDA\n",
    "Visualization of label categories (survived = 1, not survived = 0) in train set"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ayomide.bakare/opt/anaconda3/envs/py3.8/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Count of Survived and Not Survived')"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAESCAYAAADwnNLKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUUUlEQVR4nO3df5xVdZ3H8deAItYCD/spaI4luZIbmjBaKYJlurQk5ZqtbipStpUtttXaptSjR7vqVmqFGdrgjzL7sWH6sDZSM0FAkcE0JXENzVkTKzQFf0EKd//4fGfnert37h0uZ+4439fz8biPOb/P995z5vs+3++Ze6atVCohScrXsFYXQJLUWgaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDIKhaTjwCWAVcCdwD/BFYKeC9tcBXLQN680HfgucVWXeLOB24FfAr4EFwJhtLF81C4DDt9O2PgVcvp22VWky8GCNeSXg3yumHQMsbmC7HwQ+WmPePsB/A3el1xLgkAa22aijgHnbaVuvID4HNWGHVhdAhZgP7AK8HdgAvBS4kqj8Tihgf/sCu2/Dev8E7AH8rmJ6B/A5ohL8ExFsFxLv6/htL+YLfHA7bafVPgncANzcz/UOAVbXmHcVMBe4Oo0fSgTDa4nj0axr00uDhC2CoWdP4B+BDxAhAPA08GHgmjQ+BvgOURHcDXyJ3ouCEnGVRcX4NGA5cAVwR1r3YOA1wBeAKcBlVcqzL3ATcWX5K+DENH0p0AYsSuuWG0ucmy9J41uIYOhM458Hvl62fPn4YuBHRCvoNOBRYESaNxx4GJiQljsGOBu4oGxb04Hb0vBbUzl/CXQBM9L0HYlQWgvckj6Hal4KfBu4FbiPaOH8dVk5zyEq8AeJkO75ffxIWr6L2lftPc4kjuUuVebtmN7bPcRxXgCMAt5DXJX/C3BqlfXGprL3uBk4ljgOewJPlc0rH59F7+d1E/HZ/H3Zsl9Mr1nAT4C9qX18xhCtrNuJc+cr9J6jRwNr0rz/qFJ+9ZNBMPRMIrpSNlZM/z1xpQfRLH8MeCNx1b0f0b1Rz0HAecCbiEr/bOAhopJeCpxcsfwOxJXfBcBEopI9G3gLvZX/YWndcouI0HmQqFS+TrQSFjdQRoDHgTcAXyM+i6PS9COIrqg1ZcsuAP6B3spoFhE4u6T3eAJwADCTqPz3ICrnvdM+3pGmVTMdeIJ4v3sTFfvHyubvRQRsz2czFdifCLZD03v+c533egVRUX+zyry5wDji+O5H/L5/mbjSv5aoXC+sst6pxDFbB/xXKnMXvRcWfdk3vafDiM+x55wYDryf+Lx73Eft4/MVoqKfRJxvryC6O18NXEoEzCSgu4EyqQ6DYOjZSv3jOp2oXEvAZqJ/f3oD2+4m7jlAVNAvq7P83sBI4godomK5CvjbOus9R7Rq9iCCZwTwLeD7DZQRXhgsC4jKHaJS6qxY9gHiivMoovJ/W9rPW4gr42uI9/xT4vOaSNxb+C5RST9NdLtVs5C4qv1nIpSmAX9VNv/HxPHaSLQuXkZ0511PBDdUr+ArfZSoFCu7u6YTx/a5tJ8LaOw4f4947ycC9wKziVbFng2sexe9FyE/ID7HXYEjiYr/NxXL1zo+M4iuwzuJQDiQuHA5hGjd3JOWu7iBMqkOg2DouY1oWo+qmL4b0c+7M3Hcy2+wDSO6EXq0pZ8jeKFny4ZLZcvVMpy/vJFXua9qZhMV8zqikv0QcVX+XnpvDpbvu7Kc5V0XPyRaMhOIK+4fVtlfJ1HpHU9U/E+lsq8hrtB7Xm8GrkvrlO//+Rrv4yPAJcAzRHB8r2K9Wp9nI9sutzGV/Vx6u57gLz//Rj77fYD/BDYBPydaewcQXYHH0L/P/hni8z6eqOQX8JdqHZ/hxPHeP70Oorc11d/PR3UYBENPT+V5KTA6TRsNfIPoDnqWqMw+RvxC7URUtDekZdcT3UXQ+I3Z56lewdxLXI0encbHEU36G6osW24r0ZdcfgN6X6JF8ngq46RU/lH09t1Xs4m4wr+caI08U2WZq9P2TqH3inQF8HqiiwaiMvoNEaiLiOAYmV7vq7HvI9N+LwH+B3gXUcH15Xqii6Tnvc+qs3yPFUTr6bNl035GhNGOxO/6qfR+9rWO2R+I8+GYsmkvI973L4murhFEtxjAcXXK1QmcRNxHuarK/FrH5zriHkbPOXotcc7eTJwL+6XlZtXZvxpgEAxNHyWazrcQTevb0nhP18Ec4FVEE/tuopI6q2zehcQv/QTgkQb2twJ4Hb1dQD2eA95N3LS9i7jC/AJxI7EvlxPdGD9NZbuXqNCOJG5YXkmEwW+Im45L6myvk+haqHZFCtE99gPi92FlmraeCK0vEze5ryDuFzxIdEesIq6SlxD92tWcS3Rv3EXvTdTxdcp6N3A6cGPax8g6y5c7i94b3RA3Un9PnANriIr/tDRvEfEHBJ+p2MbjRPfYB4j3+mviuJ0N/IK4T3B6Wr+LF7ZqqrmdOGYLiUq/mmrHZw5xw/pu4vPr+aOG9cQFypXE5/naOvtXA9p8DLUk5c0WgSRlziCQpMwZBJKUOYNAkjL3onvW0Pr160vd3X6ZUJL6Y/LkyY8Cr6w270UXBN3d3XR0dLS6GJL0olIqlWpeQds1JEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5gwCScqcQSBJmXvRfbN4e3jo4YfZfdy4VhdDg8zv1q3jNbvt1upiSAMuyyDYfdw45nfd3OpiaJD5SMeh9ReShiC7hiQpcwaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDAJJypxBIEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5ooMgjuAxel1GTAeWAYsBeaX7fsUYBWwAphRYHkkSVUU9f8IRqaf08qmXQvMJYLhImAmcCswB5ic1lkG3ABsLqhckqQKRQXBfsBLgOvTPs4AJgFL0vxFwBHAFmA5UfFvBtYCE4GuWhtub2+nq6vmbKkpnlvKUVFB8AxwLrAAeD1R8bcBpTT/SWAMMBrYULZez/Sauru76ejoaKpwpVKp/kLKUrPnljRY9VXvFRUE9xFX96U0/BjRIugxCngC2JiGK6dLkgZIUTeLZwPnpeFxxJX/9fTeM5hO3DReCUwh7g+MASYAqwsqkySpiqJaBJcAlxM3f0tEMDwKdAIjgDXAQuIewTwiFIYBZwKbCiqTJKmKooLgz8DxVaZPrTKtM70kSS3gF8okKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5gwCScqcQSBJmTMIJClzBoEkZc4gkKTMGQSSlDmDQJIyZxBIUuYMAknKnEEgSZkzCCQpcwaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDAJJypxBIEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJXZBC8CngI2AcYDywDlgLzy/Z7CrAKWAHMKLAskqQaigqCHYGLgWfT+PnAXGAK0AbMBHYF5gAHA0cC5wA7FVQeSVINRQXBucBFwLo0PglYkoYXAYcDBwLLgc3ABmAtMLGg8kiSatihgG3OAtYD1wGfSdPagFIafhIYA4wmAoCK6X1qb2+nq6tre5VVegHPLeWoiCCYTVT6hwP7A98m7hf0GAU8AWxMw5XT+9Td3U1HR0dTBSyVSvUXUpaaPbekwaqveq+IrqFDganANOBO4ESiO2hamj+duGm8krhnMJJoCUwAVhdQHklSH4poEVTzSaATGAGsARYCW4B5RCgMA84ENg1QeSRJSdFBMK1seGqV+Z3pJUlqEb9QJkmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5gwCScqcQSBJmTMIJClzBoEkZc4gkKTMGQSSlDmDQJIyZxBIUuYMAknKnEEgSZkbqH9VKakB69Y9zNix41pdDA0yjzyyjnHjdits+waBNIiMHTuOZ569sdXF0CAzduzbC92+XUOSlDmDQJIyZxBIUuYMAknKnEEgSZkzCCQpcwaBJGXOIJCkzDUaBB+sGJ+zvQsiSWqNet8sPg44CjgMeFuaNhz4G2BegeWSJA2QekHwM+AR4OXAxWnaVuD+IgslSRo49bqGHgcWA0cAa4DfAt3UD5DhwKXAcuBmYC9gPLAMWArML9v3KcAqYAUwo79vQJLUnEYfOnch8HfAOqANKAFv7WP5d6WfBwPTgPPTenOJYLkImAncStxvmAyMJILiBmBz429BktSMRoPgIOB1RLdQI64BfpKG24E/EEGyJE1bRLQythCths3ptRaYCHQ1uB9JUpMaDYK1xBX7M/3Y9vPAt4D3AMcQ3T6lNO9JYAwwGthQtk7P9Jra29vp6jInVAzPLQ1WRZ6bjQbBHsS9gbVpvF7XUI+TgE8DtwE7l00fBTwBbEzDldNr6u7upqOjo5Ey11QqleovpCw1e241y3NTtRRZ7zUaBMf1c58nALsD5xCtiK3EDeFpxD2C6cBNwErgLKK1sRMwAVjdz31JkprQaBCcVGXaF/pY/kfAZcRfDO0IfJz4q6NOYEQaXkjcI5hH/CXRMOBMYFODZZIkbQeNBsEf0s824ADq/9np08CxVaZPrTKtM70kSS3QaBBcXDG+aHsXRJLUGo0Gwd5lw2OJm8eSpCFgW1oEm4BPFVAWSVILNBoEhxHPG9oLeAB4tLASSZIGVKOPoX4vcAtwBvFMoPcXViJJ0oBqtEXwCWAS8BTxpa9fAN8pqlCSpIHTaItgKxECEI+B8G/9JWmIaLRFcD9wHvEFsSn4/wgkachotEXwTeBPwDuAk4GvF1YiSdKAajQIzgeuBj4GdKRxSdIQ0GgQPA/ck4YfoPH/SyBJGuQavUfQDZxN/EexA4GHCyuRJGlANdoiOBn4I/BOYD0wu7ASSZIGVKMtgk3AVwsshySpRRptEUiShiiDQJIyZxBIUuYMAknKnEEgSZkzCCQpcwaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDAJJypxBIEmZMwgkKXMGgSRlziCQpMwVEQQ7AlcAS4GVwFHAeGBZmja/bL+nAKuAFcCMAsoiSaqj0f9Q1h/vBx4DTgBeDtwB3AnMBRYDFwEzif9/PAeYDIwkguIGYHMBZZIk1VBEEPwQWFg2/jwwCViSxhcBRwBbgOVExb8ZWAtMBLr62nh7eztdXX0uIm0zzy0NVkWem0UEwVPp5ygiEOYC5wKlNP1JYAwwGthQtl7P9D51d3fT0dHRVAFLpVL9hZSlZs+tZnluqpYi672ibha/BriJuFfwXWBr2bxRwBPAxjRcOV2SNICKCIJXA9cDnwYuTdPuAKal4en03kieQtwfGANMAFYXUB5JUh+K6Bo6A9gF+Gx6AZwGzANGAGuILqMtadpSIpDOBDYVUB5JUh+KCILT0qvS1CrTOtNLktQifqFMkjJnEEhS5gwCScqcQSBJmTMIJClzBoEkZc4gkKTMGQSSlDmDQJIyZxBIUuYMAknKnEEgSZkzCCQpcwaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDAJJypxBIEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5gwCScqcQSBJmTMIJClzRQbBQcDiNDweWAYsBeaX7fcUYBWwAphRYFkkSTUUFQSnAwuAkWn8fGAuMAVoA2YCuwJzgIOBI4FzgJ0KKo8kqYaiguB+4Oiy8UnAkjS8CDgcOBBYDmwGNgBrgYkFlUeSVMMOBW33KmDPsvE2oJSGnwTGAKOJAKBiep/a29vp6uraPqWUKnhuabAq8twsKggqbS0bHgU8AWxMw5XT+9Td3U1HR0dThSmVSvUXUpaaPbea5bmpWoqs9wbqr4buAKal4enETeOVxD2DkURLYAKweoDKI0lKBqpF8EmgExgBrAEWAluAeUQoDAPOBDYNUHkkSUmRQfAg8OY0fB8wtcoyneklSWoRv1AmSZkzCCQpcwaBJGXOIJCkzBkEkpQ5g0CSMmcQSFLmDAJJypxBIEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5gwCScqcQSBJmTMIJClzBoEkZc4gkKTMGQSSlDmDQJIyZxBIUuYMAknKnEEgSZkzCCQpcwaBJGXOIJCkzBkEkpQ5g0CSMjcYgmAYcBFwK7AYGN/S0khSZgZDELwbGAm8Bfg34LyWlkaSMjMYguAQ4GdpeAUwuYVlkaTstJVKpVaXYQFwFbAojf8v8Drg+RrLrwe6B6BckjSUtAOvrDZjhwEuSDUbgVFl48OoHQJQ441IkrbNYOgaWg68Mw2/Gbi7hWWRpOwMhq6hYcA3gIlAG3AycG9LSyRJGRkMQSBJaqHB0DUkSWohg0CSMmcQSFLmDII8+VgPDXYHEeemBoBBkKd342M9NHidTnzRdGSrC5ILgyBPPtZDg9n9wNGtLkRODII8jQY2lI1vYXB8y1yCeOTMc60uRE4Mgjz197EekoYwgyBPPtZD0v+zOyBPVwPvAG6h97EekjLlIyYkKXN2DUlS5gwCScqcQSBJmTMIJClzBoEkZc4gkOJ5Sz8HrgeuAyY1sa2vAns0sf73gWlNrC/1m98jUO7eABwFHAyUgP2BbwH7beP2Pr5dSiUNIFsEyt0fiSv42cBuwJ3AgcQjkPdJy3wY+DywJ/Et7MXEEzLXEF/IA7gQeE/ZeqvS8gDvBb4GjAEWAjel1xvT/FOBO4Cf4iPB1QIGgXL3KL0tgluBe4EZfSy/K3AE8CXgLmAKsBPRnfPjsuUuAU5Mw7OATuAM4EbgMOBDwHwiHE4jHvUxExjR9DuS+smuIeVuPPEQvtlpfDJxZf77smXayoZ/C/w5DXcCJxHhcC0vfHDflcAy4rn6o4HVRAvgbcD70jK7EK2HXwOb07SVzb4hqb9sESh3E4kr855/gnIf8Yjux4CxadoBZctvLRu+EXgTESKXVGx3I3A78BXgsjTt3jQ+DTiWCIsHiPsUOwPD0/akAWWLQLn7ETABuA14irg4+lfiqv9C4CHg4Rrrlog+/8OBtVXmdxL/AKintXEWERgfIloJnwfWA58jHgC4Hni6yfcj9ZsPnZOkzNk1JEmZMwgkKXMGgSRlziCQpMwZBJKUOYNAkjJnEEhS5v4PcOTAeYjmORIAAAAASUVORK5CYII=\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing classification label 'Survived'\n",
    "\n",
    "sns.countplot(train['Survived'])\n",
    "plt.title('Count of Survived and Not Survived')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Count of Survived distributed against Sex')"
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing classification label 'Survived' for 'Sex' feature\n",
    "\n",
    "sns.countplot(x='Survived',data=train,hue='Sex',palette='RdBu_r')\n",
    "plt.title('Count of Survived distributed against Sex')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Count of Survived distributed against Pclass')"
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing classification label 'Survived' for 'Pclass' feature\n",
    "\n",
    "sns.countplot(x='Survived',data=train,hue='Pclass',palette='viridis')\n",
    "plt.title('Count of Survived distributed against Pclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Age distribution plot')"
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Age'].dropna().plot.hist(bins=40)\n",
    "plt.title('Age distribution plot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Count of SibSp')"
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='SibSp',data=train)\n",
    "plt.title('Count of SibSp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Count of Survived distributed against Embarked')"
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Survived', data=train, hue='Embarked')\n",
    "plt.title('Count of Survived distributed against Embarked')\n",
    "# it looks like many passenger embarked from Southampton.\n",
    "# Nonetheless, this distribution does not clearly show any relevant correlation between embarkation and survival."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ayomide.bakare/opt/anaconda3/envs/py3.8/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Fare distribution plot')"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Fare'],kde=False,bins=40)\n",
    "plt.title('Fare distribution plot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Text(0.5, 1.0, 'Boxplot of Pclass against Age')"
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 720x504 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,7))\n",
    "sns.boxplot(x='Pclass',y='Age',data=train)\n",
    "plt.title('Boxplot of Pclass against Age')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Imputation\n",
    "###### General Outline of Imputation\n",
    "1. Impute missing values in **Age** based on mean of age grouped by **Pclass**\n",
    "2. Engineer **Title** feature from **Name** feature\n",
    "3. Drop **Cabin** feature\n",
    "4. Impute missing values in **Embarked** with most frequent embarkation\n",
    "5. Impute missing value in **Fare** feature\n",
    "\n",
    "NB: Imputation done separately for train and test datasets"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "# feature engineering on Name feature. It looks like the user title could have an effect on Survival\n",
    "def eng_name(data):\n",
    "    \"\"\"\n",
    "    helper method to engineer new Title feature from Name feature\n",
    "    :param data: train or test data\n",
    "    :return: None\n",
    "    \"\"\"\n",
    "    data['Title'] = data['Name'].apply(lambda name: re.split('[,.]+ *', name)[1])\n",
    "\n",
    "def impute_age(data):\n",
    "    \"\"\"\n",
    "    helper method to perform imputation on Age\n",
    "    :param data: train or test data\n",
    "    :return: None\n",
    "    \"\"\"\n",
    "    Pclass1Mean = data['Age'][data['Pclass'] == 1].mean()\n",
    "    Pclass2Mean = data['Age'][data['Pclass'] == 2].mean()\n",
    "    Pclass3Mean = data['Age'][data['Pclass'] == 3].mean()\n",
    "\n",
    "    def _impute(cols):\n",
    "        Age = cols[0]\n",
    "        Pclass = cols[1]\n",
    "\n",
    "        if (pd.isnull(Age)):\n",
    "            if Pclass == 1:\n",
    "                return Pclass1Mean\n",
    "            elif Pclass == 2:\n",
    "                return Pclass2Mean\n",
    "            else:\n",
    "                return Pclass3Mean\n",
    "        else:\n",
    "            return Age\n",
    "\n",
    "    data['Age'] = data[['Age', 'Pclass']].apply(_impute,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Train dataset\n",
    "###### 1. Impute missing values in **Age** based on mean of age grouped by **Pclass**"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "outputs": [],
   "source": [
    "# perform imputation on train data\n",
    "impute_age(train)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Visualize null values after **Age** imputation in train data"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:>"
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize null values in train data\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 2. Engineer Title feature from Name feature"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "outputs": [
    {
     "data": {
      "text/plain": "   PassengerId                                               Name Title\n0            1                            Braund, Mr. Owen Harris    Mr\n1            2  Cumings, Mrs. John Bradley (Florence Briggs Th...   Mrs\n2            3                             Heikkinen, Miss. Laina  Miss\n3            4       Futrelle, Mrs. Jacques Heath (Lily May Peel)   Mrs\n4            5                           Allen, Mr. William Henry    Mr",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Name</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>Miss</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>Mr</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eng_name(train)\n",
    "train.head()[['PassengerId', 'Name', 'Title']]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 3. Drop **Cabin** feature"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cabin has to many missing values, could make it categorical as Cabin Available vs Cabin Inavailable\n",
    "train.drop('Cabin',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 4. Impute missing values in **Embarked** with most frequent embarkation"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "outputs": [],
   "source": [
    "# Impute (one) missing value for Fare column. The culprit is a male and third class passenger\n",
    "train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()[0])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Visualize null values after dropping **Cabin** feature, **Title** feature engr, and imputing **Embarked** feature\n",
    "in train data"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:>"
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize null values in train data\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:xlabel='Pclass', ylabel='Age'>"
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 720x504 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,7))\n",
    "sns.boxplot(x='Pclass',y='Age',data=test)"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Test dataset\n",
    "###### 1. Impute missing values in **Age** based on mean of age grouped by **Pclass**"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impute missing age values in test dataset\n",
    "impute_age(test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 2. Engineer Title feature from Name feature"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "outputs": [
    {
     "data": {
      "text/plain": "   PassengerId                                          Name Title\n0          892                              Kelly, Mr. James    Mr\n1          893              Wilkes, Mrs. James (Ellen Needs)   Mrs\n2          894                     Myles, Mr. Thomas Francis    Mr\n3          895                              Wirz, Mr. Albert    Mr\n4          896  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   Mrs",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Name</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>Kelly, Mr. James</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>Mrs</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eng_name(test)\n",
    "test.head()[['PassengerId', 'Name', 'Title']]\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 3. Drop **Cabin** feature"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "outputs": [],
   "source": [
    "# Cabin has to many missing values, could make it categorical as Cabin Available vs Cabin Inavailable\n",
    "test.drop('Cabin',axis=1,inplace=True)\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "###### 5. Impute missing value in **Fare** feature"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "outputs": [],
   "source": [
    "# Impute (one) missing value for Fare column. The culprit is a male and third class passenger\n",
    "test['Fare'] = test['Fare'].fillna(test['Fare'][(test['Pclass'] == 3) & (test['Sex'] == 'male')].mean())"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Visualize null values after dropping **Cabin** feature, imputing **Age**, imputing **Fare**\n",
    " in test data"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<AxesSubplot:>"
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize null values in test data¡\n",
    "sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save clean test data to csv file\n",
    "train.to_csv(DATA_DIR + 'clean_titanic_train.csv',index=False)\n",
    "test.to_csv(DATA_DIR + 'clean_titanic_test.csv',index=False)\n"
   ]
  }
 ],
 "metadata": {
  "slug": "rms-titanic-simple-eda",
  "published": true,
  "unlisted": false,
  "title": "RMS Titanic (Simple EDA)",
  "date": "2021-01-11",
  "categories": ["notebook"],
  "author": "Ayomide Bakare",
  "excerpt": "This is the legendary Titanic ML; love, hope, class, luxury, travel and death. This notebook show a simple exploratory data analysis of the titanic dataset (available on Kaggle).",
  "description": "This is the legendary Titanic ML; love, hope, class, luxury, travel and death. This notebook show a simple exploratory data analysis of the titanic dataset (available on Kaggle).",
  "banner": "./images/banner.jpg",
  "bannerCredit": "All HD Wallpaper",
  "keywords": ["eda", "data science", "python"],
  "redirects": ["/rms-titanic-simple-eda"],
  "expiryDate": "",
  "type": "",
  "images": [],
  "hasFooter": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}